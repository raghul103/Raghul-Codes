/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_ARDCHECK_PB_H_INCLUDED
#define PB_ARDCHECK_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Data { 
    float temperature1; 
    float Humidity1; 
    float temperature2; 
    float Humidity2; 
    float current1LTC; 
    float current1INA; 
    float current2INA; 
    float current3INA; 
    float current4INA; 
    float current5INA; 
    int32_t DAQ_flag; 
    char state[9]; 
    int32_t switch1; 
    int32_t switch2; 
    int32_t PWM1; 
    int32_t PWM2; 
    bool Hflag; 
    char input[2]; 
    bool Sflag; 
} Data;

typedef struct _command { 
    int32_t RG_config; 
    int32_t spi_config; 
    char character[2]; 
} command;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Data_init_default                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, "", 0}
#define command_init_default                     {0, 0, ""}
#define Data_init_zero                           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, "", 0}
#define command_init_zero                        {0, 0, ""}

/* Field tags (for use in manual encoding/decoding) */
#define Data_temperature1_tag                    1
#define Data_Humidity1_tag                       2
#define Data_temperature2_tag                    3
#define Data_Humidity2_tag                       4
#define Data_current1LTC_tag                     5
#define Data_current1INA_tag                     6
#define Data_current2INA_tag                     7
#define Data_current3INA_tag                     8
#define Data_current4INA_tag                     9
#define Data_current5INA_tag                     10
#define Data_DAQ_flag_tag                        11
#define Data_state_tag                           12
#define Data_switch1_tag                         13
#define Data_switch2_tag                         14
#define Data_PWM1_tag                            15
#define Data_PWM2_tag                            16
#define Data_Hflag_tag                           17
#define Data_input_tag                           18
#define Data_Sflag_tag                           19
#define command_RG_config_tag                    1
#define command_spi_config_tag                   2
#define command_character_tag                    3

/* Struct field encoding specification for nanopb */
#define Data_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature1,      1) \
X(a, STATIC,   SINGULAR, FLOAT,    Humidity1,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature2,      3) \
X(a, STATIC,   SINGULAR, FLOAT,    Humidity2,         4) \
X(a, STATIC,   SINGULAR, FLOAT,    current1LTC,       5) \
X(a, STATIC,   SINGULAR, FLOAT,    current1INA,       6) \
X(a, STATIC,   SINGULAR, FLOAT,    current2INA,       7) \
X(a, STATIC,   SINGULAR, FLOAT,    current3INA,       8) \
X(a, STATIC,   SINGULAR, FLOAT,    current4INA,       9) \
X(a, STATIC,   SINGULAR, FLOAT,    current5INA,      10) \
X(a, STATIC,   SINGULAR, INT32,    DAQ_flag,         11) \
X(a, STATIC,   SINGULAR, STRING,   state,            12) \
X(a, STATIC,   SINGULAR, INT32,    switch1,          13) \
X(a, STATIC,   SINGULAR, INT32,    switch2,          14) \
X(a, STATIC,   SINGULAR, INT32,    PWM1,             15) \
X(a, STATIC,   SINGULAR, INT32,    PWM2,             16) \
X(a, STATIC,   SINGULAR, BOOL,     Hflag,            17) \
X(a, STATIC,   SINGULAR, STRING,   input,            18) \
X(a, STATIC,   SINGULAR, BOOL,     Sflag,            19)
#define Data_CALLBACK NULL
#define Data_DEFAULT NULL

#define command_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    RG_config,         1) \
X(a, STATIC,   SINGULAR, INT32,    spi_config,        2) \
X(a, STATIC,   SINGULAR, STRING,   character,         3)
#define command_CALLBACK NULL
#define command_DEFAULT NULL

extern const pb_msgdesc_t Data_msg;
extern const pb_msgdesc_t command_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Data_fields &Data_msg
#define command_fields &command_msg

/* Maximum encoded size of messages (where known) */
#define Data_size                                126
#define command_size                             25

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
