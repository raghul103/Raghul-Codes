/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_ARDUINO_PB_H_INCLUDED
#define PB_ARDUINO_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Data { 
    float Temp1; 
    float Temp2; 
    float Curr1; 
    float Curr2; 
    float Curr3; 
    bool DAQ_flag; 
    float BattVolt; 
    char state[128]; 
    int32_t switch1; 
    int32_t switch2; 
    int32_t PWM1; 
    int32_t PWM2; 
    bool Hflag; 
    char user[128]; 
    bool Sflag; 
} Data;

typedef struct _command { 
    int32_t commandtype; 
    char datas[128]; 
} command;

typedef struct _commandAck { 
    int32_t comand_type; 
    int32_t statuss; 
} commandAck;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Data_init_default                        {0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, "", 0}
#define command_init_default                     {0, ""}
#define commandAck_init_default                  {0, 0}
#define Data_init_zero                           {0, 0, 0, 0, 0, 0, 0, "", 0, 0, 0, 0, 0, "", 0}
#define command_init_zero                        {0, ""}
#define commandAck_init_zero                     {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Data_Temp1_tag                           1
#define Data_Temp2_tag                           2
#define Data_Curr1_tag                           3
#define Data_Curr2_tag                           4
#define Data_Curr3_tag                           5
#define Data_DAQ_flag_tag                        6
#define Data_BattVolt_tag                        7
#define Data_state_tag                           8
#define Data_switch1_tag                         9
#define Data_switch2_tag                         10
#define Data_PWM1_tag                            11
#define Data_PWM2_tag                            12
#define Data_Hflag_tag                           13
#define Data_user_tag                            14
#define Data_Sflag_tag                           15
#define command_commandtype_tag                  1
#define command_datas_tag                        2
#define commandAck_comand_type_tag               1
#define commandAck_statuss_tag                   2

/* Struct field encoding specification for nanopb */
#define Data_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    Temp1,             1) \
X(a, STATIC,   SINGULAR, FLOAT,    Temp2,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    Curr1,             3) \
X(a, STATIC,   SINGULAR, FLOAT,    Curr2,             4) \
X(a, STATIC,   SINGULAR, FLOAT,    Curr3,             5) \
X(a, STATIC,   SINGULAR, BOOL,     DAQ_flag,          6) \
X(a, STATIC,   SINGULAR, FLOAT,    BattVolt,          7) \
X(a, STATIC,   SINGULAR, STRING,   state,             8) \
X(a, STATIC,   SINGULAR, INT32,    switch1,           9) \
X(a, STATIC,   SINGULAR, INT32,    switch2,          10) \
X(a, STATIC,   SINGULAR, INT32,    PWM1,             11) \
X(a, STATIC,   SINGULAR, INT32,    PWM2,             12) \
X(a, STATIC,   SINGULAR, BOOL,     Hflag,            13) \
X(a, STATIC,   SINGULAR, STRING,   user,             14) \
X(a, STATIC,   SINGULAR, BOOL,     Sflag,            15)
#define Data_CALLBACK NULL
#define Data_DEFAULT NULL

#define command_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    commandtype,       1) \
X(a, STATIC,   SINGULAR, STRING,   datas,             2)
#define command_CALLBACK NULL
#define command_DEFAULT NULL

#define commandAck_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    comand_type,       1) \
X(a, STATIC,   SINGULAR, INT32,    statuss,           2)
#define commandAck_CALLBACK NULL
#define commandAck_DEFAULT NULL

extern const pb_msgdesc_t Data_msg;
extern const pb_msgdesc_t command_msg;
extern const pb_msgdesc_t commandAck_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Data_fields &Data_msg
#define command_fields &command_msg
#define commandAck_fields &commandAck_msg

/* Maximum encoded size of messages (where known) */
#define Data_size                                340
#define commandAck_size                          22
#define command_size                             141

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
